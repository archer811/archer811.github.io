---
layout: post
title:      "读书笔记——Java内存区域与内存溢出异常"
subtitle:   "Java memory area"
date:       2017-06-26 10:00:00
author:     "Zhouxj"
header-img: "img/post-bg-memarea.jpg"
catalog: true
comments: true
tags:
    - java
    - jvm
    - 读书笔记
---

>  《深入理解Java虚拟机》 第二章

java虚拟机在java程序运行过程中把它管理的内存划分诺干个不同的数据区域：

### 程序计数器
当前线程所执行的字节码的行号指示器，“线程私有”

### java虚拟机栈和本地方法栈
区别是java虚拟机执行java方法，本地方法作栈执行native方法。
线程私有
每个方法在执行的同时创建一个栈针，用于存局部变量表（编译期可知的各种基本数据类型，对象引用，64位长度的long和double数据占2个局部变量空间）、操作数栈，动态链接、方法出口。
局部变量表的大小是确定的。
栈深度不够，抛出StackOverflowError。无法申请足够内存，抛出OutOfMemoryError，由-Xss设置

### java堆
所有线程共享
垃圾收集器的主要区域，所以java堆还可以细分为：新生代和老年代。
通过-Xmx，-Xms控制。
如果堆中没有内存完成实例分配，并且堆也无法再扩展，抛出OutOfMemoryError

### 方法区
所有线程共享
被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。
很多人更愿意把方法区称为“永久代”，-XX:MaxPermSize。
运行时的常量池是方法区的一部分：Class文件中除了有类的版本，字段，方法，接口等描述信息，编译期生成的各种字面量和符号引用。

/********************************************/
### 补充
对象的内存布局
分3块区域，对象头，实例数据，对齐填充。
对象头包括两部分：一部分存储对象自身的运行时数据，如哈希码，GC分代年龄，锁状态标志，线程持有的锁，偏向线程id，偏向时间戳。
另一部分是类型指针，对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。

